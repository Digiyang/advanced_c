1- volatile

the volatile type qualifier tells the compiler explicitly that the specified variable will change its value.
it is provided so that a program can tell the compiler to suppress various kinds of optimizations
    prevents the compiler from optimizing away seemingly redundant assignments to a variable
    prevents the compiler from repeated examination of a variable without its value seemingly changing
essentially, prevents the compiler from "caching" variables
the reason for having this type qualifier is mainly because of the problems that are encountered in real-time or embedded systems programming
    programs that have a lot of threading
    programs where resources are scarce

Use cases:
    a variable should be declared volatile whenever its value could change unexpectedly
    the optimizer must be careful to reload the variable every time it is used instead of holding a copy in a register
    only three types of variables should use volatile
        memory-mapped peripheral registers
        global variables (non stack variables) modified by an interrupt service routine
        global variables accessed by multiple tasks within a multi-threaded application

Syntax:
    volatile int loc1; /* loc1 is a volatile location */
    volatile int * ploc; /* ploc points to a volatile location*/

Example:
    val1 = x;
    /* some code */
    val2 = x;

    a smart (optimizing) compiler might notice that you use x twice without changing its value
        would temporarily store the x value in a register
        when x is needed for val2, it can save time by reading the value from a register instead of from the original memory location
    this optimization is not desired if x is changed between the two statements by some other agency
        you would use the volatile keyword to ensure that the compiler does not optimize and instead has a stored value for each variable

Another Example (An I/O port):
    suppose you have an output port that is pointed to by a variable in your program
    if you want to write two characters to the port
        an O followed by an N
    *outPort = 'O';
    *outPort = 'N';
    a smart compiler might notice two successive assignments to the same location
        because outPort is not being modified in between, the compiler would remove the first assignment from the program
    to prevent this from happening, you declare outPort to be a volatile pointer
    volatile char *outPort;

Can a pointer be volatile? Explain your answer? 
    yes: Although this is not very common. An example is when an interrupt service routine modifies a pointer to a buffer
    
Using volatile with const:
    a value can be both volatile and const
    a hardware clock setting normally should not be changed by the program
        make it const
    however, it is changed by an agency other than the program
        make it volatile

2- restrict
the restrict type qualifier is an optimization hint for the compiler
    the compiler can choose to ignore it
used in pointer declarations as a type qualifier for pointers
    tells the compiler that a particular pointer is the only reference to the value it points to throughout its scope
        the same value is not referenced by any other pointer or variable within that scope
        the pointer is the sole initial means of accessing a data object
    tells the compiler it does not need to add any additional checks
without the restrict keyword, the compiler has to assume the worse case
    that some other identifier might have changed the data in between two uses of a pointer
with the restrict keyword used, the compiler is free to look for computational shortcuts
if a programmer uses restrict keyword and violate the above condition, result is undefined behavior
it's not supported by c++

Syntax:
    int * restrict intPtrA;
    int * restrict intPtrB;

    tells the compiler that, for the duration of the scope in which intPtrA and intPtrB are defined
        they will never access the same value
    their use for pointing to integers inside an array is mutually exclusive